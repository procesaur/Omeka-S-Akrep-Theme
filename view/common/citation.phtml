<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var \Omeka\Api\Representation\AbstractResourceEntityRepresentation $resource
 * @var string $style
 * @var string $locale
 * @var array $defaults
 * @var bool $bibliographic
 * @var bool $append_site
 * @var bool $append_date
 * @var string $tag
 */

$plugins = $this->getHelperPluginManager();
$translate = $plugins->get('translate');
$escape = $plugins->get('escapeHtml');
$api = $this->api();


if (!function_exists('trans'))   {
	function trans($x){
		$cyr = array('а','б','в','г','д','ђ','е','ж','з','и','ј','к','л','љ','м','н','њ','о','п','р','с','т','ћ','у','ф','х','ц','ч','џ','ш','А','Б','В','Г','Д','Ђ','Е','Ж','З','И','Ј','К','Л','Љ','М','Н','Њ','О','П','Р','С','Т','Ћ','У','Ф','Х','Ц','Ч','Џ','Ш');
		$lat = array('a','b','v','g','d','đ','e','ž','z','i','j','k','l','lj','m','n','nj','o','p','r','s','t','ć','u','f','h','c','č','dž','š','A','B','V','G','D','Đ','E','Ž','Z','I','J','K','L','Lj','M','N','Nj','O','P','R','S','T','Ć','U','F','H','C','Č','Dž','Š');
		return  str_replace($cyr, $lat, $x);
	}
}
if (!function_exists('iscyr'))   {
	function iscyr($x){
		$cyr = array('а','б','в','г','д','ђ','е','ж','з','и','ј','к','л','љ','м','н','њ','о','п','р','с','т','ћ','у','ф','х','ц','ч','џ','ш','А','Б','В','Г','Д','Ђ','Е','Ж','З','И','Ј','К','Л','Љ','М','Н','Њ','О','П','Р','С','Т','Ћ','У','Ф','Х','Ц','Ч','Џ','Ш');
		foreach ($cyr as $c){
			if (strpos($x, $c)){ return true; }
		}
		return false;
	}
}
if (!function_exists('formatAPAAuthors'))   {
	function formatAPAAuthors($creatorList) {
		$formatted = [];

		foreach ($creatorList as $creator) {
			$parts = explode(' ', trim($creator));
			if (count($parts) < 2) continue;

			$first = array_shift($parts); // First word is the given name
			$last = implode(' ', $parts); // All remaining words are the surname

			$initial = strtoupper(mb_substr($first, 0, 1)) . '.';

			$formatted[] = "{$last}, {$initial}";
		}

		$count = count($formatted);
		if ($count === 1) {
			return $formatted[0];
		} elseif ($count === 2) {
			return "{$formatted[0]} & {$formatted[1]}";
		} else {
			return implode(', ', array_slice($formatted, 0, $count - 1)) . ', & ' . $formatted[$count - 1];
		}
	}

}


$citation = '';
$title = $resource->displayTitle();
	
	
$creatorsRaw = $resource->value('dcterms:creator', ['all' => true]) ?: (@$defaults['dcterms:creator'][0]['@value'] ? [$defaults['dcterms:creator'][0]['@value']] : []);
$creatorsRaw = array_values(array_filter(array_map('strip_tags', $creatorsRaw)));

$creatorList = [];

if (count($creatorsRaw) === 1 && strpos($creatorsRaw[0], ',') !== false) {
    // Case 1: Single string with comma-separated names
    $creatorList = array_map('trim', explode(',', $creatorsRaw[0]));
} else {
    // Case 2: Already split into individual names
    $creatorList = array_map('trim', $creatorsRaw);
}

	
if ($creatorList) {
	$creatorAPA = formatAPAAuthors($creatorList);
	$citation .= $creatorAPA;
}

$source = $resource->value('dcterms:source') ?: @$defaults['dcterms:source'][0]['@value'];
$number = $resource->value('rgf:bibliographicCitationIssue') ?: @$defaults['rgf:bibliographicCitationIssue'][0]['@value'];
$volume = $resource->value('rgf:bibliographicCitationVolume') ?: @$defaults['rgf:bibliographicCitationVolume'][0]['@value'];
$date = $resource->value('dcterms:issued') ?: @$defaults['dcterms:issued'][0]['@value'];
$page = $resource->value('rgf:bibliographicCitationSpage') ?: @$defaults['rgf:bibliographicCitationSpage'][0]['@value'];
$topage = $resource->value('rgf:bibliographicCitationEpage') ?: @$defaults['rgf:bibliographicCitationEpage'][0]['@value'];
$doi = $resource->value('bibo:doi') ?: @$defaults['bibo:doi'][0]['@value'];
$kat = $resource->value('rgf:identifierSubcategory') ?: @$defaults['rgf:identifierSubcategory'][0]['@value'];

	
	// Year
if ($date) {
    $citation .= ' (' . $date . ').';
}

// Title
if ($title) {
    $citation .= ' "' . $title . '".';
}

// Source (Journal name)
if ($source) {
    $citation .= ' <i>' . $source . '</i>';
}

// Volume and issue
if ($volume) {
    $citation .= ', ' . $volume;
    if ($number) {
        $citation .= '(' . $number . ')';
    }
}

// Page range
if ($page) {
    $citation .= ', ' . $page;
    if ($topage) {
        $citation .= '-' . $topage;
    }
}

// DOI
if ($doi) {
    $citation .= '. https://doi.org/' . $doi;
}

// Optional category tag
if ($kat && $this->themeSetting('citecat')) {
    $citation .= ' ' . $kat;
}


echo empty($tag) ? $citation : "<$tag class=\"citation\">$citation</$tag>";
